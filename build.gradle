import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.auth.policy.resources.S3BucketResource
import com.amazonaws.auth.policy.resources.S3ObjectResource
import com.amazonaws.services.s3.model.ObjectMetadata

import jp.classmethod.aws.gradle.s3.SyncTask

buildscript {
    repositories {
        jcenter()
        mavenCentral()		
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }
}

repositories {
    jcenter()
		
	maven { 
		name = "jitpack"
		url "https://jitpack.io" 
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: "jp.classmethod.aws.s3"

aws {
	profileName = "minecraft"
	region = "us-east-1"
}

def myBucketName = 'broad-participation'


version = "v1.3.2"
group = 'com.github.CityOfLearning'
archivesBaseName = "rabbit-gui"

minecraft {
    version = "1.8.9-11.15.1.1902-1.8.9"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_22"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
	antlr "org.antlr:antlr4:4.5" // use ANTLR version 4
    shade 'net.objecthunter:exp4j:0.4.5'
	shade "org.antlr:antlr4-runtime:4.5.3"
}

jar {	
	
    from (sourceSets.main.output) {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
    
    configurations.shade.each{ dep ->
        from(project.zipTree(dep)){
            exclude 'META-ING', 'META-INF/**', '**/LICENSE.txt'
        }
    }
}

artifacts {
    archives jar
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.7"
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobfJar.doLast {
    ant.checksum file: tasks.jar.archivePath
}

build.doLast {
	File jarFile = file('./build/libs/' + archivesBaseName + '-' + version +".jar")
	File md5File = file('./build/libs/' + archivesBaseName + '-' + version +".jar.MD5")
	jarFile.renameTo(file('./build/libs/' + archivesBaseName+".jar"))
	md5File.renameTo(file('./build/libs/' + archivesBaseName+".MD5"))
}

task publish(type: SyncTask, dependsOn: build) {
	source file('./build/libs/') //must be a directory
	bucketName myBucketName
	
	metadataProvider { bucket, key, file ->
	
		ObjectMetadata m = new ObjectMetadata()
		m.setCacheControl("no-cache, no-store")
		return m
	}
	
	setAcl 'PublicRead'
}